<?php
/**
 * @file
 * Skimlinks affiliate marketing service
 *
 * by Mike Carter ("budda", http://drupal.org/user/13164)
 */

/**
 * Implements hook_menu().
 */
function skimlinks_menu() {
  $items['admin/config/services/skimlinks'] = array(
    'title' => 'Skimlinks',
    'description' => 'Enabling affiliate marketing using the Skimlinks API service.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('skimlinks_admin_settings_form'),
    'access arguments' => array('administer skimlinks'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'skimlinks.admin.inc',
  );

  return $items;
}


/**
 * Implements hook_permission().
 */
function skimlinks_permission() {
  return array(
    'administer skimlinks' => array(
      'title' => t('Administer Skimlinks'),
      'description' => t('Perform maintenance tasks for Skimlinks.'),
    )
  );
}

/**
 * Implements hook_cron_queue_info().
 */
function skimlinks_cron_queue_info() {
  if (!variable_get('skimlinks_api_cron_enabled', 1)) {
    return;
  }

  $queues['skimlinks_api_queue'] = array(
    'worker callback' => 'skimlinks_api_process_queue_item',
    'time' => (int) variable_get('skimlinks_queue_process_time', 60),
  );

  return $queues;
}

/**
 * Helper to add items to the queue.
 *
 * @param array $domain
 */
function skimlinks_api_add_queue_item($domain) {
  // Check if the domain is known and/or needs refreshing.
  if (_skimlinks_domain_expired($domain)) {
    // Get the queue handle.
    $q = DrupalQueue::get('skimlinks_api_queue');
    $q->createItem(array($domain));
  }
}

/**
 * Perform action on each queue item.
 *
 * @param array $data
 */
function skimlinks_api_process_queue_item($data) {
  foreach ($data as $domain) {
    // Check if the domain is known and/or needs refreshing.
    // This check avoids multiple updates the same domain before it expired.
    if (_skimlinks_domain_expired($domain)) {
      skimlinks_validate_merchant($domain);
    }
  }
}

/**
 * Implements hook_page_alter() to insert JavaScript to the appropriate scope/region of the page.
 */
function skimlinks_page_alter(&$page) {
  if (path_is_admin(current_path())) {
    return;
  }

  // Check that Client side implementation is enabled.
  if (variable_get('skimlinks_environment', 0) != 0) {
    return;
  }

  if ($domain_id = variable_get('skimlinks_publisherid', FALSE)) {

    if ($subdomain = variable_get('skimlinks_subdomain', FALSE)) {
      // Remove http:// or https://
      foreach (array('http://', 'https://') as $protocol) {
        $subdomain = str_replace($protocol, '', $subdomain);
      }

      drupal_add_js('var skimlinks_domain = "' . $subdomain . '";', array('type' => 'inline', 'scope' => 'footer', 'group' => JS_DEFAULT));
    }

    drupal_add_js("http://s.skimresources.com/js/{$domain_id}.skimlinks.js", array('type' => 'external', 'scope' => 'footer', 'group' => JS_DEFAULT));
  }
}


function skimlinks_block_info() {
  return array(
    'disclosurebadge' => array(
      'info' => t('A user selectable Skimlinks usage disclosure badge.'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    )
  );
}


function skimlinks_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'disclosurebadge':
      if ($domain_id = variable_get('skimlinks_publisherid', FALSE)) {
        $domain_id = explode( 'x', $domain_id );
        $content = '<script class="skimlinks_ref_script" type="text/javascript" src="http://static.skimlinks.com/api/ref.js?p=' . current( $domain_id ) . '&amp;d=' . end( $domain_id ) . '&amp;t=' . variable_get('skimlinks_disclosurebadge', 1) . '"></script>';
      }
      else {
        $content = t('You need to set your sites !domainid first.', array('!domainid' => l(t('domain ID'), 'admin/config/system/skimlinks')));
      }

      $block = array(
        'subject' => '',
        'content' => $content
      );

      break;
  }

  return $block;
}


/**
 * Implements hook_block_configure().
 */
function skimlinks_block_configure($delta = '') {
  $form = array();

  switch ($delta) {
    case 'disclosurebadge':
      $form['badge'] = array(
        '#type' => 'fieldgroup',
        '#title' => t('Badge')
      );

      for ($count = 1; $count <=5; $count++) {
        $options[$count] = theme('image', array(
        'path' => 'https://accounts.skimlinks.com/img/referral/button_' . $count . '.gif',
        'title' => t('Disclosure badge style ' . $count),
        'alt' => t('Image of a disclosure badge style ' . $count)
        ));
      }

      $form['badge']['skimlinks_disclosurebadge'] = array(
        '#type' => 'radios',
        '#title' => t('Style'),
        '#default_value' => variable_get('skimlinks_disclosurebadge', 1),
        '#options' => $options,
        '#description' => t("Select a style of badge that best fits with your site design colours."),
      );
    break;
  }

  return $form;
}


/**
 * Implements hook_block_save().
 */
function skimlinks_block_save($delta = '', $edit = array()) {
  switch ($delta) {
    case 'disclosurebadge':
      variable_set('skimlinks_disclosurebadge', (int) $edit['skimlinks_disclosurebadge']);
      break;
  }
}


/**
 * Implements hook_filter_info().
 *
 * Provide Skimlinks url filter.
 * @todo The filter isn't working correctly at the moment.
 */
// function skimlinks_filter_info() {
//   $filters['skimlinks'] = array(
//     'title' => t('Skimlinks'),
//     'description' => t('Converts links to recognised merchants in to shortened affiliated links.'),
//     'process callback' => 'skimlinks_shorten_urls',
//     'settings callback' => '_skimlinks_filter_settings',
//     'cache' => TRUE,
//   );
//   return $filters;
// }


/**
 * Allow admins to select the type of short url
 *
 * @access private
 * @param mixed $form
 * @param mixed &$form_state
 * @param mixed $filter
 * @param mixed $format
 * @param mixed $defaults
 * @return void
 */
function _skimlinks_filter_settings($form, &$form_state, $filter, $format, $defaults) {
  $filter->settings += $defaults;

  $settings['filter_skimlink_host'] = array(
    '#type' => 'select',
    '#title' => t('URL Prefix'),
    '#default_value' => 'buyth.at',
    '#options' => array(
      'buyth.at' => 'BuyTh.at',
      'getth.at' => 'GetTh.at',
      'useth.at' => 'UseTh.at',
      'tryth.at' => 'TryTh.at',
    ),
    '#description' => t('Your link will be, for example, http://buyth.at/gsca5'),
  );
  return $settings;
}


/**
 * Find all urls in the node field content and get them shortened
 *
 * @access public
 * @param mixed $text
 * @param mixed $filter
 * @return void
 */
function skimlinks_shorten_urls($text, $filter) {
  $text = preg_replace_callback('/((https|http):\/\/\.?[^"\s]*)/i', 'skimlinks_urlshortener', $text);
  return $text;
}


/**
 * Call the Skimlinks API to generate a short affiliated url from our source url
 *
 * @access public
 * @param mixed $url
 * @return void
 */
function skimlinks_urlshortener($url) {
  $id = variable_get('skimlinks_publisherid', FALSE);
  $domain_id = current( explode( 'x', $id ));
  $host = variable_get('filter_skimlink_host', 'buyth.at');

  $url = $url[1];

  $shortener = drupal_http_request('https://accounts.skimlinks.com/shorturl_ajax.php?url=' . $url . '&host=' . $host . '&pubid=' . $domain_id);
  if ($shortener->code == 200) {
    $tinyurl = array();
    preg_match('/(http:\/\/' . $host . '\/[a-zA-Z0-9]*)/', $shortener->data, $tinyurl);
    return $tinyurl[0];
  }

  return FALSE;
}

/**
 * Helper to build the redirect url.
 */
function skimlinks_get_redirect_url($path, $node) {
  $xcust = $node->nid;
  $context = array('node' => $node);

  // Allow other modules to alter xcust.
  drupal_alter('skimlinks_xcust', $xcust, $context);

  $current_url = url(current_path(), array(
    'absolute' => TRUE,
    'query' => drupal_get_query_parameters())
  );

  $parameters = array(
    'id' => check_plain(variable_get('skimlinks_publisherid')),
    'url' => check_url($path),
    'xcust' => check_plain($xcust),
    'sref' => check_url($current_url),
  );

  $query = drupal_http_build_query($parameters);
  $redirect_url = check_url(variable_get('skimlinks_subdomain'));
  $redirect_url = trim($redirect_url, '/') . '/';

  return "$redirect_url?$query";
}

/**
 * Implements hook_entity_insert().
 *
 * @param $entity
 * @param $type
 */
function skimlinks_entity_insert($entity, $type) {
  __skimlinks_entity_update_knwown_domains($entity);
}

/**
 * Implements hook_entity_update().
 *
 * @param $entity
 * @param $type
 */
function skimlinks_entity_update($entity, $type) {
  __skimlinks_entity_update_knwown_domains($entity);
}

/**
 * Helper to return only the host bit of the base url.
 *
 * @param $url The url
 *
 * @return string The host part of the url
 */
function _skimlinks_get_host($url) {
  if ($parsed_url = parse_url($url)) {
    if (isset($parsed_url['host'])) {
      return str_replace('www.', '', $parsed_url['host']);
    }
    else {
      return $url;
    }
  }
}

/**
 * Implements hook_node_view().
 *
 */
function skimlinks_node_view($node, $view_mode, $langcode) {
  // Check if this view mode is configured to be processed.
  if (!in_array($view_mode, variable_get('skimlinks_displays', array('full')))) {
    return;
  }

  // Check that Server side implementation is enabled.
  if (variable_get('skimlinks_environment', 0) != 1) {
    return;
  }

  global $base_url;
  $host = _skimlinks_get_host($base_url);

  // Look up the fields to act on.
  foreach (element_children($node->content) as $field_id) {
    if (empty($node->content[$field_id]['#items'])) {
      continue;
    }

    foreach ($node->content[$field_id]['#items'] as $key => $field) {
      if (empty($field['format']) || empty($node->content[$field_id][$key]['#markup'])) { //@todo replace with $field['#markup']
        continue;
      }

      $markup = &$node->content[$field_id][$key]['#markup'];

      // Get all links, excluding internal links.
      $doc = filter_dom_load($markup);
      $xpath = new DOMXpath($doc);
      $elements = $xpath->query("//a[not(contains(@href,'$host'))]");

      $changed = FALSE;
      foreach ($elements as $domElement) {
        $href = $domElement->getAttribute('href');
        if (skimlinks_domain_allowed($href)) {

          // Change the link.
          $redirect = skimlinks_get_redirect_url($href, $node);
          $domElement->setAttribute('href', $redirect);

          if (variable_get('skimlinks_link_new_window')) {
            $domElement->setAttribute('target', '_blank');
          }
          $changed = TRUE;
        }

        // Queue domain to be checked by Merchant API worker.
        if (variable_get('skimlinks_api_cron_enabled', 1)) {
          if (url_is_external($href)) {
            $domain = _skimlinks_get_host($href);
            skimlinks_api_add_queue_item($domain);
          }
        }
      }

      // Update markup if there was any change.
      if ($changed) {
        $markup = filter_dom_serialize($doc);
      }
    }
  }
}

/**
 * Helper to update the known domains when the entity is created or updated.
 *
 * @param $entity
 */
function __skimlinks_entity_update_knwown_domains($entity) {
  // Check that Server side implementation is enabled.
  if (variable_get('skimlinks_environment', 0) != 1) {
    return;
  }

  // Check if the configuration to update the known domains when entity is
  // changed is on.
  if (variable_get('skimlinks_update_known_domains_on_entity_update', 1) != 1) {
    return;
  }

  global $base_url;
  $host = _skimlinks_get_host($base_url);

  foreach ($entity as $field_name => $field) {
    if (is_array($field) && isset($field[$entity->language][0]['format'])) {
      // Loop fields.
      foreach ($field[$entity->language] as $key => $field_item) {
        if (empty($field_item['value'])) {
          continue;
        }
        // Get all links, excluding internal links.
        $doc = filter_dom_load($field_item['value']);
        $xpath = new DOMXpath($doc);
        $elements = $xpath->query("//a[not(contains(@href,'$host'))]");

        foreach ($elements as $domElement) {
          $domain = _skimlinks_get_host($domElement->getAttribute('href'));
          skimlinks_validate_merchant($domain, 2);
        }
      }
    }
  }
}

/**
 * Tests a domain against the Merchant API
 * http://developers.skimlinks.com/merchant.html
 * Adds the entry to the known domains list.
 *
 * @param $domain The domain
 * @param $timeout The timeout in ms
 */
function skimlinks_validate_merchant($domain, $timeout = 10) {
  $result = skimlinks_merchant_api_call($domain, $timeout);
  if (!empty($result->merchants)) {
    skimlinks_known_domains_update($domain, TRUE);
  }
  else {
    skimlinks_known_domains_update($domain, FALSE);
  }
}

/**
 * Calls the Merchant API to
 *
 * @param $domain The domain
 * @param $timeout The timeout
 */
function skimlinks_merchant_api_call($domain, $timeout = 10) {
  $api_endpoint = check_plain(variable_get('skimlinks_merchant_api_endpoint'));
  $parameters = array(
    'apikey' => check_plain(variable_get('skimlinks_merchant_api_key')),
    'account_id' => check_plain(variable_get('skimlinks_merchant_api_account_id')),
    'account_type' => check_plain(variable_get('skimlinks_merchant_api_account_type')),
    'search' => $domain,
  );
  $query = drupal_http_build_query($parameters);

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_HEADER, FALSE);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);
  curl_setopt($ch, CURLOPT_URL, "$api_endpoint?$query");

  $result = json_decode(curl_exec($ch));
  curl_close($ch);

  return $result;
}

/**
 * Test if the domain of the url is known, valid and not blacklisted.
 *
 * @param $url The url to be tested.
 *
 * @return TRUE if the domain is allowed.
 */
function skimlinks_domain_allowed($url) {
  // Do not change internal urls.
  if (!url_is_external($url)) {
    return;
  }

  if (db_table_exists('skimlinks_domains') == FALSE) {
    return;
  }

  if (db_table_exists('skimlinks_blacklist') == FALSE) {
    return;
  }

  $domain = _skimlinks_get_host($url);

  $query = db_select('skimlinks_domains', 'w');
  $query->addField('w', 'domain');
  $query->leftJoin('skimlinks_blacklist', 'b', 'w.domain = b.domain');
  $query->condition('w.domain', $domain);
  $query->condition('w.valid', 1);
  $query->isNull('b.domain');

  $result = $query->execute()->fetchAllAssoc('domain');

  if (sizeof($result) > 0) {
    return TRUE;
  }
}

/**
 * Gets a list of blacklisted domains.
 *
 * @return array The list
 */
function skimlinks_domain_blacklist() {
  $result = db_select('skimlinks_blacklist', 'b')
    ->fields('b', array('domain'))
    ->execute()
    ->fetchAllAssoc('domain');

  return array_keys($result);
}

/**
 * Adds/Updates a domain to the known domains list.
 *
 * @param $domain The domain
 * @param $valid True is its valid
 */
function skimlinks_known_domains_update($domain, $valid) {
  if (db_table_exists('skimlinks_domains') == FALSE) {
    return;
  }

  db_merge('skimlinks_domains')
    ->key(array('domain' => $domain))
    ->fields(array(
      'domain' => $domain,
      'last_updated' => $_SERVER['REQUEST_TIME'],
      'valid' => ($valid === TRUE) ? 1 : 0,
    ))
    ->execute();
}

/**
 * Helper to check if the domain needs to be refreshed after the update
 * threshold is reached or it doesn't exist.
 *
 * @param $domain
 *
 * @return TRUE if the domain has expired or doesn't exist on the table.
 */
function _skimlinks_domain_expired($domain) {
  if (db_table_exists('skimlinks_domains') == FALSE) {
    return;
  }

  // Check if the domain was already checked on the last N minutes.
  $minutes = variable_get('skimlinks_domains_update_threshold', 720);

  $query = db_select('skimlinks_domains', 'w');
  $query->addField('w', 'last_updated');
  $query->condition('w.domain', $domain);
  $last_updated = $query->execute()->fetchField();

  if (empty($last_updated) || $last_updated + $minutes * 60 < $_SERVER['REQUEST_TIME']) {
    return TRUE;
  }
}

/**
 * Helper to save the blacklist on the database.
 *
 * @param $domains
 */
function skimlinks_create_blacklist($domains) {
  $domains = explode("\n", $domains);
  $domains = array_map('trim', $domains);
  $domains = array_filter($domains, 'trim');
  $domains = array_unique($domains);

  db_truncate('skimlinks_blacklist')->execute();
  $query = db_insert('skimlinks_blacklist')->fields(array('domain'));

  foreach ($domains as $domain) {
    $query->values(array('domain' => check_plain($domain)));
  }
  $query->execute();
}
