<?php
/**
 * @file
 * Skimlinks affiliate marketing service
 *
 * by Mike Carter ("budda", http://drupal.org/user/13164)
 */

/**
 * Implements hook_menu().
 */
function skimlinks_menu() {
  $items['admin/config/services/skimlinks'] = array(
    'title' => 'Skimlinks',
    'description' => 'Enabling affiliate marketing using the Skimlinks API service.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('skimlinks_admin_settings_form'),
    'access arguments' => array('administer skimlinks'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'skimlinks.admin.inc',
  );

  return $items;
}


/**
 * Implements hook_permission().
 */
function skimlinks_permission() {
  return array(
    'administer skimlinks' => array(
      'title' => t('Administer Skimlinks'),
      'description' => t('Perform maintenance tasks for Skimlinks.'),
    )
  );
}

/**
 * Implements hook_node_view().
 *
 */
function skimlinks_node_view($node) {
  // Check that Server side implementation is enabled.
  if (variable_get('skimlinks_environment', 0) != 1) {
    return;
  }

  $host = _skimlinks_get_host();

  // Look up the fields to act on.
  foreach (element_children($node->content) as $field_id) {
    if (empty($node->content[$field_id]['#items'])) {
      continue;
    }

    foreach ($node->content[$field_id]['#items'] as $key => $field) {
      if (isset($field['format'])) {
        if (empty($node->content[$field_id][$key]['#markup'])) {
          continue;
        }

        $markup = &$node->content[$field_id][$key]['#markup'];

        // Get all links, excluding internal links.
        $doc = filter_dom_load($markup);
        $xpath = new DOMXpath($doc);
        $elements = $xpath->query("//a[not(contains(@href,'$host'))]");

        foreach ($elements as $domElement) {
          $href = $domElement->getAttribute('href');
          // Only change links that are external and are not blacklisted.
          if (skimlinks_domain_allowed($href)) {
            $redirect = skimlinks_get_redirect_url($href, $node);
            $domElement->setAttribute('href', $redirect);
            if (variable_get('skimlinks_link_new_window')) {
              $domElement->setAttribute('target', '_blank');
            }
          }
        }
        $markup = filter_dom_serialize($doc);
      }
    }
  }
}

/**
 * Implements hook_page_alter() to insert JavaScript to the appropriate scope/region of the page.
 */
function skimlinks_page_alter(&$page) {
  if (path_is_admin(current_path())) {
    return;
  }

  // Check that Client side implementation is enabled.
  if (variable_get('skimlinks_environment', 0) != 0) {
    return;
  }

  if ($domain_id = variable_get('skimlinks_publisherid', FALSE)) {

    if ($subdomain = variable_get('skimlinks_subdomain', FALSE)) {
      // Remove http:// or https://
      foreach (array('http://', 'https://') as $protocol) {
        $subdomain = str_replace($protocol, '', $subdomain);
      }

      drupal_add_js('var skimlinks_domain = "' . $subdomain . '";', array('type' => 'inline', 'scope' => 'footer', 'group' => JS_DEFAULT));
    }

    drupal_add_js("http://s.skimresources.com/js/{$domain_id}.skimlinks.js", array('type' => 'external', 'scope' => 'footer', 'group' => JS_DEFAULT));
  }
}


function skimlinks_block_info() {
  return array(
    'disclosurebadge' => array(
      'info' => t('A user selectable Skimlinks usage disclosure badge.'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    )
  );
}


function skimlinks_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'disclosurebadge':
      if ($domain_id = variable_get('skimlinks_publisherid', FALSE)) {
        $domain_id = explode( 'x', $domain_id );
        $content = '<script class="skimlinks_ref_script" type="text/javascript" src="http://static.skimlinks.com/api/ref.js?p=' . current( $domain_id ) . '&amp;d=' . end( $domain_id ) . '&amp;t=' . variable_get('skimlinks_disclosurebadge', 1) . '"></script>';
      }
      else {
        $content = t('You need to set your sites !domainid first.', array('!domainid' => l(t('domain ID'), 'admin/config/system/skimlinks')));
      }

      $block = array(
        'subject' => '',
        'content' => $content
      );

      break;
  }

  return $block;
}


/**
 * Implements hook_block_configure().
 */
function skimlinks_block_configure($delta = '') {
  $form = array();

  switch ($delta) {
    case 'disclosurebadge':
      $form['badge'] = array(
        '#type' => 'fieldgroup',
        '#title' => t('Badge')
      );

      for ($count = 1; $count <=5; $count++) {
        $options[$count] = theme('image', array(
        'path' => 'https://accounts.skimlinks.com/img/referral/button_' . $count . '.gif',
        'title' => t('Disclosure badge style ' . $count),
        'alt' => t('Image of a disclosure badge style ' . $count)
        ));
      }

      $form['badge']['skimlinks_disclosurebadge'] = array(
        '#type' => 'radios',
        '#title' => t('Style'),
        '#default_value' => variable_get('skimlinks_disclosurebadge', 1),
        '#options' => $options,
        '#description' => t("Select a style of badge that best fits with your site design colours."),
      );
    break;
  }

  return $form;
}


/**
 * Implements hook_block_save().
 */
function skimlinks_block_save($delta = '', $edit = array()) {
  switch ($delta) {
    case 'disclosurebadge':
      variable_set('skimlinks_disclosurebadge', (int) $edit['skimlinks_disclosurebadge']);
      break;
  }
}


/**
 * Implements hook_filter_info().
 *
 * Provide Skimlinks url filter.
 * @todo The filter isn't working correctly at the moment.
 */
// function skimlinks_filter_info() {
//   $filters['skimlinks'] = array(
//     'title' => t('Skimlinks'),
//     'description' => t('Converts links to recognised merchants in to shortened affiliated links.'),
//     'process callback' => 'skimlinks_shorten_urls',
//     'settings callback' => '_skimlinks_filter_settings',
//     'cache' => TRUE,
//   );
//   return $filters;
// }


/**
 * Allow admins to select the type of short url
 *
 * @access private
 * @param mixed $form
 * @param mixed &$form_state
 * @param mixed $filter
 * @param mixed $format
 * @param mixed $defaults
 * @return void
 */
function _skimlinks_filter_settings($form, &$form_state, $filter, $format, $defaults) {
  $filter->settings += $defaults;

  $settings['filter_skimlink_host'] = array(
    '#type' => 'select',
    '#title' => t('URL Prefix'),
    '#default_value' => 'buyth.at',
    '#options' => array(
      'buyth.at' => 'BuyTh.at',
      'getth.at' => 'GetTh.at',
      'useth.at' => 'UseTh.at',
      'tryth.at' => 'TryTh.at',
    ),
    '#description' => t('Your link will be, for example, http://buyth.at/gsca5'),
  );
  return $settings;
}


/**
 * Find all urls in the node field content and get them shortened
 *
 * @access public
 * @param mixed $text
 * @param mixed $filter
 * @return void
 */
function skimlinks_shorten_urls($text, $filter) {
  $text = preg_replace_callback('/((https|http):\/\/\.?[^"\s]*)/i', 'skimlinks_urlshortener', $text);
  return $text;
}


/**
 * Call the Skimlinks API to generate a short affiliated url from our source url
 *
 * @access public
 * @param mixed $url
 * @return void
 */
function skimlinks_urlshortener($url) {
  $id = variable_get('skimlinks_publisherid', FALSE);
  $domain_id = current( explode( 'x', $id ));
  $host = variable_get('filter_skimlink_host', 'buyth.at');

  $url = $url[1];

  $shortener = drupal_http_request('https://accounts.skimlinks.com/shorturl_ajax.php?url=' . $url . '&host=' . $host . '&pubid=' . $domain_id);
  if ($shortener->code == 200) {
    $tinyurl = array();
    preg_match('/(http:\/\/' . $host . '\/[a-zA-Z0-9]*)/', $shortener->data, $tinyurl);
    return $tinyurl[0];
  }

  return FALSE;
}

/**
 * Helper to build the redirect url.
 */
function skimlinks_get_redirect_url($path, $node) {
  $xcust = $node->nid;
  $context = array('node' => $node);

  // Allow other modules to alter xcust.
  drupal_alter('skimlinks_xcust', $xcust, $context);

  $current_url = url(current_path(), array(
    'absolute' => TRUE,
    'query' => drupal_get_query_parameters())
  );

  $parameters = array(
    'id' => check_plain(variable_get('skimlinks_publisherid')),
    'url' => check_url($path),
    'xcust' => check_plain($xcust),
    'sref' => check_url($current_url),
  );

  $query = drupal_http_build_query($parameters);
  $redirect_url = check_url(variable_get('skimlinks_subdomain'));
  $redirect_url = trim($redirect_url, '/') . '/';

  return "$redirect_url?$query";
}

/**
 * Implements hook_entity_insert().
 *
 * @param $entity
 * @param $type
 */
function skimlinks_entity_insert($entity, $type) {
  // Check that Server side implementation is enabled.
  if (variable_get('skimlinks_environment', 0) != 1) {
    return;
  }

  _skimlinks_entity_update_whitelist($entity);
}

/**
 * Implements hook_entity_update().
 *
 * @param $entity
 * @param $type
 */
function skimlinks_entity_update($entity, $type) {
  // Check that Server side implementation is enabled.
  if (variable_get('skimlinks_environment', 0) != 1) {
    return;
  }

  _skimlinks_entity_update_whitelist($entity);
}

/**
 * Helper to return only the host bit of the base url.
 *
 * @return string The host
 */
function _skimlinks_get_host() {
  // Make sure we don't touch internal links.
  global $base_url;
  $parsed_url = parse_url($base_url);

  return $parsed_url['host'];
}

function _skimlinks_entity_update_whitelist($entity) {
  $host = _skimlinks_get_host();

  foreach ($entity as $key => $field) {
    if (is_array($field) && isset($field[$entity->language][0]['format'])) { //@todo work with multivalue fields
      var_dump($field);
      if (empty($field[$entity->language][0]['value'])) {
        continue;
      }

      $value = $entity->{$key}[$entity->language][0]['value'];

      // Get all links, excluding internal links.
      $doc = filter_dom_load($value);
      $xpath = new DOMXpath($doc);
      $elements = $xpath->query("//a[not(contains(@href,'$host'))]");

      foreach ($elements as $domElement) {
        $href = $domElement->getAttribute('href');
        $parsed_url = parse_url($href);

        // Remove www from domain.
        $domain = str_replace('www.', '', $parsed_url['host']);

        // Get whitelist as array.
        $whitelist = variable_get('skimlinks_domain_whitelist', '');
        $whitelist = array_filter(explode("\n", $whitelist));
debug($whitelist);
        // Check if it is a valid merchant.
        $valid_domain = skimlinks_valid_merchant($domain);

        if ($valid_domain && !in_array($domain, $whitelist)) {
          // Add domain to whitelist
          $whitelist[] = $domain;
          variable_set('skimlinks_domain_whitelist', implode("\n", $whitelist));
debug('whitelisted ' . $domain);
        }

        if (!$valid_domain && in_array($domain, $whitelist)) {
          // Remove domain from whitelist.
          $key = array_search($domain, $whitelist);
          unset($whitelist[$key]);
debug('un-whitelisted ' . $domain);
debug($whitelist);
          variable_set('skimlinks_domain_whitelist', implode("\n", $whitelist));
        }
      }
    }
  }
}

/**
 * Tests a domain against the Merchant API
 * http://developers.skimlinks.com/merchant.html
 *
 * @param $domain
 */
function skimlinks_valid_merchant($domain) {
  return skimlinks_merchant_api_call($domain);
}

/**
 * Calls the Merchant API to
 *
 * @param $domain
 */
function skimlinks_merchant_api_call($domain) {
  return TRUE;//@todo do the call
}

/**
 * Wrapper to test that the domain of the url is whitelisted and not blacklisted.
 *
 * @param $url The url to be tested.
 *
 * @return TRUE if the domain is allowed.
 */
function skimlinks_domain_allowed($url) {
  return url_is_external($url) &&
    skimlinks_domain_whitelisted($url) &&
    !skimlinks_domain_blacklisted($url);
}

/**
 * Helper to check if a domain is whitelisted.
 *
 * @param $url The url to be tested.
 *
 * @return TRUE if the domain is whitelisted.
 */
function skimlinks_domain_whitelisted($url) {
  $parsed_url = parse_url($url);
  $host = isset($parsed_url['host']) ? $parsed_url['host'] : '';
  $whitelist = variable_get('skimlinks_domain_whitelist', '');
  foreach (array_filter(explode("\n", $whitelist)) as $domain) {
    if (strpos($host, trim($domain)) !== FALSE) {
      return TRUE;
    }
  }
}

/**
 * Helper to check if a domain is blacklisted.
 *
 * @param $url The url to be tested.
 *
 * @return TRUE if the domain is blacklisted.
 */
function skimlinks_domain_blacklisted($url) {
  $parsed_url = parse_url($url);
  $host = isset($parsed_url['host']) ? $parsed_url['host'] : '';
  $blacklist = variable_get('skimlinks_domain_blacklist', '');
  foreach (array_filter(explode("\n", $blacklist)) as $domain) {
    if (strpos($host, trim($domain)) !== FALSE) {
      return TRUE;
    }
  }
}
