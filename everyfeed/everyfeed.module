<?php
/**
 * @file
 * Code for the Everyfeed feature.
 */

include_once('everyfeed.features.inc');

/**
 * Implementation of hook_perm().
 */
function everyfeed_permission() {
  return array(
    'manage products' => array('title' => 'Manage products', 'description' => 'Allows control of adding, removing and viewing products from the merchant data feeds.'),
    'administer everyfeed' => array('title' => 'Administer Everyfeed', 'description' => 'API configuration.')  
  );
}

/**
  * Implementation of hook_menu().
  */
function everyfeed_menu() {
  $items = array();
  
  $items['admin/config/content/everyfeed'] = array(
   'title' => 'Everyfeed',
   'description' => 'Automated content aggregation from retail merchants.',
   'page callback' => 'drupal_get_form',
   'page arguments' => array('everyfeed_admin_products'),
   'access arguments' => array('manage products'),
   'type' => MENU_NORMAL_ITEM,
  );
  
  $items['admin/config/content/everyfeed/add'] = array(
   'title' => 'Everyfeed Searches',
   'description' => 'Automated content aggregation from retail merchants.',
   'page callback' => 'drupal_get_form',
   'page arguments' => array('everyfeed_admin_products'),  
   'access arguments' => array('manage products'),     
   'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  
  $items['everyfeed/categories'] = array(
   'title' => 'Category autocomplete',
   'description' => '',
   'page callback' => 'everyfeed_admin_categories_autocomplete',
   'access arguments' => array('manage products'),
   'type' => MENU_CALLBACK,
  );
  
  $items['everyfeed/remove/confirm/%'] = array(
    'title' => 'Everyfeed remove product',
    'page callback' => 'drupal_get_form', 
    'page arguments' => array('everyfeed_admin_product_remove', 3),
    'access arguments' => array('manage products'),    
    'type' => MENU_CALLBACK,
  );

  $items['everyfeed/update/%'] = array(
    'title' => 'Everyfeed update existing products',
    'page callback' => 'everyfeed_admin_product_update', 
    'page arguments' => array(2),
    'access arguments' => array('manage products'),    
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/content/everyfeed/settings'] = array(
    'title' => 'Settings',
    'description' => 'Everyfeed configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('everyfeed_admin_settings_form'),
    'access arguments' => array('administer everyfeed'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10
  );

  return $items;
} 
 
 
/**
 * Admin UI auto complete catgory list
 * 
 * @access public
 * @param mixed $term
 * @return void
 */
function everyfeed_admin_categories_autocomplete($term) {
  if ($term) {
    // Get our master category list
    $cats = everyfeed_get_category_list();
  
    // Remove categories which don't match the search term
    $cat_match = array_filter($cats, function ($var) use ($term) { return (stristr($var, $term)) ? true : false; });
  
    // Only show the first 10 matches
    $cat_match = array_slice($cat_match, 0, 10, true);
  
    print drupal_json_encode($cat_match);
  }

  exit;
}

 
function everyfeed_admin_products($form_state) {
  // Get our master category list
  $cats = everyfeed_get_category_list();
  $product_searches = db_query('SELECT * FROM {everyfeed_products}');
  
  $header = array(t('Keyword'), t('Category'), t('Actions'));
  $rows = array();

  while ($product_search = $product_searches->fetchAssoc() ) {
  	$actions = array(
		l(t('remove'), 'everyfeed/remove/confirm/' . $product_search['pid']),
		l(t('update'), 'everyfeed/update/' . $product_search['pid'])
  	);
  
    $rows[] = array(
      'class' => array('everyfeed-product-row-'. $product_search['pid']),
      'data' => array(
        l(check_plain($product_search['keyword']), 'admin/config/content/everyfeed/products/' . $product_search['pid']),
        check_plain($product_search['category_id'] == 0 ? t('All') : $cats[$product_search['category_id']]),
        theme('item_list', array('items' => $actions))
      ),
    );
  }

  $form['productsearches'] = array(
    '#markup' => theme('table', array('header' => $header, 'rows' => $rows, 'sticky' => true, array('class' => array('everyfeed-product-table'))))
  );
  
  // No adding keywords without an API key
  if (variable_get('everyfeed_apikey', '')) {
    $form['newproductsearch'] = array(
      '#type' => 'textfield',
      '#title' => t('Keyword'),
      '#size' => 40,
      '#required' => true,
      '#prefix' => '<div class="container-inline">',
    );
  
    $form['newproductcategory'] = array(
      '#type' => 'textfield',
      '#title' => t('Category'),
      '#size' => 30,
      '#autocomplete_path' => 'everyfeed/categories'
    );
      
    $form['add'] = array(
      '#type' => 'submit',
      '#value' => t('Add'),
      '#suffix' => '</div>'
    );
  } else {
    drupal_set_message(
      t('You must !link before adding any product keywords.',
      array('!link' => l(t('add your API key'), 'admin/config/content/everyfeed/settings'))),
      'error'
    );
  }
  
  return $form;
}


/**
 * Confirm removal of a product range
 * 
 * @access public
 * @param mixed $form
 * @param mixed $form_state
 * @param mixed $pid
 * @return void
 */
function everyfeed_admin_product_remove($form, $form_state, $pid) {
  $form = array(
   'product_id' => array(
      '#type' => 'value', 
      '#value' => $pid,
    ),
  );
  
  return confirm_form($form, t('Delete products?'), 'admin/config/content/everyfeed',  t('This action cannot be undone.'), t('Remove products'), t('Cancel'));
}


/**
 * Delete un-wanted products
 * 
 * @access public
 * @param mixed $form
 * @param mixed &$form_state
 * @return void
 */
function everyfeed_admin_product_remove_submit($form, &$form_state) {

  // Nuke all products which are related
  $nids = db_query("SELECT entity_id FROM {field_data_field_searchphraseid} WHERE bundle = 'ef_product' AND field_searchphraseid_value = :phraseid", array(':phraseid' => $form_state['values']['product_id']))->fetchCol();
  if (count($nids) > 0) node_delete_multiple($nids);
  
  // Nuke row from database
  db_delete('everyfeed_products')
    ->condition('pid', $form_state['values']['product_id'])
    ->execute();
  
  $form_state['redirect'] = 'admin/config/content/everyfeed'; 
}
 
 

/**
 * Make sure new product additions are valid
 * 
 * @access public
 * @param mixed $form
 * @param mixed $form_state
 * @return void
 */
function everyfeed_admin_products_validate($form, $form_state) {
  // Get our master category list
  $cats = everyfeed_get_category_list();

  // Make sure we already recognise the category  
  if($form_state['values']['newproductcategory'] && !isset($cats[$form_state['values']['newproductcategory']])) {
    form_set_error('newproductcategory', t('Category not recognised.'));
  }
}

/**
 * Add a new product range as nodes
 * 
 * @access public
 * @param mixed $form
 * @param mixed $form_state
 * @return void
 */
function everyfeed_admin_products_submit($form, $form_state) { 
  $entry = array(
    'keyword' => $form_state['values']['newproductsearch'],
    'category_id' => $form_state['values']['newproductcategory']
  );
  
  // Store the search phrase
  $result = drupal_write_record('everyfeed_products', $entry);
 	watchdog('everyfeed', 'phrase:' . print_r($entry, true), array(), WATCHDOG_DEBUG); // @debug

  // Begin the importing of products matching the submitted search phrase 
  everyfeed_admin_product_add($entry['keyword'], $entry['category_id'], $entry['pid']);
}


/**
 * Set up a batch import process for the new search phrase keyword
 * 
 * @access public
 * @param mixed $product
 * @param mixed $category
 * @param mixed $phrase_id
 * @return void
 */
function everyfeed_admin_product_add($product, $category, $phrase_id) {
  $batch = array(
    'title' => t('Importing products'),
    'init_message' => t('Contacting the product database'),
    'progress_message' => t('Sifting through products'),
    'error_message' => t('Product import has encountered an error.'),
    'operations' => array(
      array('everyfeed_batch_process', array(urlencode($product), $category, $phrase_id)),
    ),
    'finished' => 'everyfeed_batch_complete',
    'file' => drupal_get_path('module', 'everyfeed') . '/everyfeed.batch.inc',
  );
  batch_set($batch);
}



function everyfeed_admin_product_update($phrase_id) {
  $search = db_query("SELECT keyword, category_id FROM {everyfeed_products} WHERE pid = :phraseid", array(':phraseid' => $phrase_id));
  $record = $search->fetchObject();
  
  $batch = array(
    'title' => t('Updating products'),
    'init_message' => t('Contacting the product database'),
    'progress_message' => t('Sifting through products'),
    'error_message' => t('Product import has encountered an error.'),
    'operations' => array(
      array('everyfeed_batch_process', array(urlencode($record->keyword), $record->category_id, $phrase_id)),
    ),
    'finished' => 'everyfeed_batch_complete',
    'file' => drupal_get_path('module', 'everyfeed') . '/everyfeed.batch.inc',
  );
  batch_set($batch);
  batch_process('admin/config/content/everyfeed');
}


/**
 * everyfeed_get_category_list function.
 * 
 * @access public
 * @return void
 */
function everyfeed_get_category_list() {
  $data = everyfeed_callapi('getmeta/category');
	$categories = array();
  
  if (isset($data['meta'])) {
  	// Re-jig the array of categories so that the cat ID is the array key
  	for ($i = 0; $i < count($data['meta']['category']); $i=$i+2) {
    	$d = $data['meta']['category'][$i];
  		$categories[$data['meta']['category'][$i+1]] = $data['meta']['category'][$i];
  	}
	}

  return $categories;
}


/**
 * This function is a waste of time
 * 
 * @access public
 * @return void
 */
function everyfeed_get_merchant_list() {
  $result = cache_get('everyfeed_merchants');
  $merchants = isset($result->data) ? $result->data : array();

  if (!$merchants) {
    $data = everyfeed_callapi('getmeta/merchant');
    $merchants = array();
    
    foreach($data['meta']['merchant'] as $merchant) {
      if (!is_numeric($merchant)) {
        $merchants[] = $merchant;
      }
    }
     
    if ($merchants) {
      cache_set('everyfeed_merchants', $merchants, 'cache', CACHE_PERMANENT);
    }
  }

  return $merchants;
}


/**
 * Actually execute the webservice call to Everyfeed API
 * 
 * @access public
 * @param mixed $method
 * @return void
 */
function everyfeed_callapi($method) {
  $result = cache_get($method); 
  $values = isset($result->data) ? $result->data : array();

  if (!$values) {
    $url = 'http://api.everyfeed.net/json/' . variable_get('everyfeed_apikey', '') . '/' . $method . '/';
    $result = drupal_http_request($url);
        
    if ($result->code == 200) {
      $values = drupal_json_decode($result->data);
      if (isset($values['everyFeed'])) {
        $values = $values['everyFeed'];
        
        if ($values) {
          cache_set($method, $values, 'cache', CACHE_TEMPORARY);
        }
      }
    }
  }
  
  return $values;
}


/**
 * everyfeed_form_alter function.
 * 
 * @access public
 * @param mixed &$form
 * @param mixed &$form_state
 * @param mixed $form_id
 * @return void
 */
function everyfeed_form_alter(&$form, &$form_state, $form_id)
{
  if($form_id == 'ef_product_node_form') {
  	$form['#validate'][] = 'everyfeed_node_form_validate';
	}
}


/**
 * Check to make sure another node doesn't already have the same product ID
 * 
 * @access public
 * @param mixed $form
 * @param mixed &$form_state
 * @return void
 */
function everyfeed_node_form_validate($form, &$form_state) {
  if ($form_state['values']['field_productid']) {
    $result = db_query("SELECT entity_id, revision_id FROM {field_data_field_productid} WHERE bundle = 'ef_product' AND field_productid_value = :productid", array(':productid' => $form_state['values']['field_productid']['und'][0]['value']));
    if ($count = $result->rowCount()) {
      $nodes = $result->fetchAssoc();
      
      if ($form_state['values']['vid'] != $nodes['revision_id']) {
      
        // Update the form submission to refer to the existing node
        form_set_value($form['nid'], $nodes['entity_id'], $form_state);
        form_set_value($form['vid'], $nodes['revision_id'], $form_state);
        
        // Preserve some existing flags
        $orig = node_load(array('nid' => $nodes['entity_id'], 'vid' => $nodes['revision_id']));

        form_set_value($form['options']['status'], $orig->status, $form_state);       
        form_set_value($form['options']['promote'], $orig->promote, $form_state);
        form_set_value($form['options']['sticky'], $orig->sticky, $form_state);
        //form_set_value($form['#node'], $orig, $form_state); //!@todo preserve more parts of the existing node.
                
        // Preserve any user selected bundle fields
        $updatefields = variable_get('everyfeed_updatefields', array('field_price'));
  
        foreach($updatefields as $updatefield => $active) {
          if ($updatefield === $active) {
            $f = $orig->$updatefield;
            $form_state['values'][$updatefield] = $f[LANGUAGE_NONE];
          }
        }
        
       //form_set_error('field_productid', t('A product with the same ID already exists in the system. !link', array('!link' => l(t('View product'), 'node/' . $nodes['revision_id']) ) ));
      }
    }
  }
}


/**
 * Implements hook_admin_settings() for module settings configuration.
 */
function everyfeed_admin_settings_form($form_state) {
  $path = drupal_get_path('module', 'everyfeed');

  $form['about'] = array(
    '#markup' =>
      theme('image', array('path' => $path . '/everyfeed.jpeg', 'alt' => 'Everyfeed', 'attributes' => array('style' => 'float: right') )) .
      '<p>' . t('The Everyfeed API features over 18 million products across some of the best merchants and networks. To gain access to the product information from with in your site is as simple as applying for an API Key below.') . '</p>'
  );

  $form['account'] = array(
    '#type' => 'fieldset',
    '#title' => t('Account'),
  );
  
  $form['account']['everyfeed_apikey'] = array(
    '#type' => 'textfield',
    '#title' => t('API Key'),
    '#description' => t('You can obtain an API key from the !link.', array('!link' => l(t('Skimlinks Lab'), 'http://skimlinks.com/?menu=login&return=apirequest'))),
    '#default_value' => variable_get('everyfeed_apikey', ''),
    '#size' => 35,
    '#maxlength' => 32,
    '#required' => TRUE
  );
  
  $form['products'] = array(
    '#type' => 'fieldset',
    '#title' => t('Products'),
    '#description' => t('When you create Everyfeed searches for products the results are used to generate Product nodes.')
  );
  
  $form['products']['everyfeed_currency'] = array(
    '#type' => 'select',
    '#title' => t('Currency'),
    '#description' => t('Merchants and the products they have available will be dictated by the currency you set when executing the searches. This setting is global across this website.'),
    '#options' => array('GBP', 'USD'),
    '#default_value' => variable_get('everyfeed_currency', 'GBP')
  );
  
  // Obtain a list of fields which are used in our custom content type bundle
  $entityfields = field_info_instances('node', 'ef_product');
  $updatefields = array('title' => t('Title'));
  
  foreach($entityfields as $field) {
    $updatefields[$field['field_name']] = $field['label'];
  }
  
  // We never want to show these as configurable update fields
  unset($updatefields['field_searchphraseid']);
  unset($updatefields['field_currency']);
  
  $form['products']['everyfeed_updatefields'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Protected Product fields'),
    '#description' => t('Select any product fields you plan to manually change the content of and protect from being replaced automatically during an Everyfeed update.'),
    '#options' => $updatefields,
    '#default_value' => variable_get('everyfeed_updatefields', array('title', 'body'))
  );
  
  return system_settings_form($form);
}