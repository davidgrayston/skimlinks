<?php

//api: 5f847cef199fffa001a443f83f78e313



/* variable_set('everyfeed_apikey', '5f847cef199fffa001a443f83f78e313'); */

/**
  * Implementation of hook_menu().
  */
function everyfeed_menu() {
  $items = array();
  
  $items['admin/config/content/everyfeed'] = array(
   'title' => 'Everyfeed',
   'description' => 'Automated content aggregation from retail merchants.',
   'page callback' => 'drupal_get_form',
   'page arguments' => array('everyfeed_admin_products'),
   'access arguments' => array('access content'),
   'type' => MENU_NORMAL_ITEM,
  );
  
  $items['everyfeed/categories'] = array(
   'title' => '',
   'description' => '',
   'page callback' => 'everyfeed_admin_categories_autocomplete',
   'access arguments' => array('access content'),
   'type' => MENU_CALLBACK,
  );
  
  $items['everyfeed/remove/%ctools_js/tablenix/%'] = array(
    'title' => 'Remove product keyword',
    'page callback' => 'everyfeed_admin_products_remove',
    'page arguments' => array(2, 4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
} 
 
 
/**
 * Admin UI auto complete catgory list
 * 
 * @access public
 * @param mixed $term
 * @return void
 */
function everyfeed_admin_categories_autocomplete($term) {
  if ($term) {
    // Get our master category list
    $cats = everyfeed_get_category_list();
  
    // Remove categories which don't match the search term
    $cat_match = array_filter($cats, function ($var) use ($term) { return (stristr($var, $term)) ? true : false; });
  
    // Only show the first 10 matches
    $cat_match = array_slice($cat_match, 0, 10, true);
  
    print drupal_json_encode($cat_match);
  }

  exit;
}


/**
 *  Nix a row from a table and restripe.
 */
function everyfeed_admin_products_remove($js, $row) {
  if (!$js) {
    // We don't support degrading this from js because we're not
    // using the server to remember the state of the table.
    return MENU_ACCESS_DENIED;
  }
  ctools_include('ajax');

  $commands = array();
  $commands[] = ajax_command_remove("tr.everyfeed-product-row-$row");
  $commands[] = ajax_command_restripe("table.everyfeed-product-table");
  print ajax_render($commands);
  
  // Nuke row from database
  db_delete('everyfeed_products')
    ->condition('pid', $row)
    ->execute();
  
  exit;
}

 
function everyfeed_admin_products($form_state) {
  // Include the CTools tools that we need.
  ctools_include('ajax');
  
  
  // Get our master category list
  $cats = everyfeed_get_category_list();
  
  $product_searches = db_query('SELECT * FROM {everyfeed_products}');
  
  // Create a table that we can have data removed from via AJAX.
  $header = array(t('Keyword'), t('Category'), t('Actions'));
  $rows = array();

  while ($product_search = $product_searches->fetchAssoc() ) {
    $rows[] = array(
      'class' => array('everyfeed-product-row-'. $product_search['pid']),
      'data' => array(
        check_plain($product_search['keyword']),
        check_plain($product_search['category_id'] == 0 ? t('All') : $cats[$product_search['category_id']]),
        ctools_ajax_text_button("remove", "everyfeed/remove/nojs/tablenix/" . $product_search['pid'], t('Delete this product search')),
      ),
    );
  }

  $form['productsearches'] = array(
    '#markup' => theme('table', array('header' => $header, 'rows' => $rows, array('class' => array('everyfeed-product-table'))))
  );
  
  $form['newproductsearch'] = array(
    '#type' => 'textfield',
    '#title' => t('Keyword'),
    '#size' => 95,
    '#required' => true,
    '#prefix' => '<div class="container-inline">',
  );

  $form['newproductcategory'] = array(
    '#type' => 'textfield',
    '#title' => t('Category'),
    '#size' => 40,
    '#autocomplete_path' => 'everyfeed/categories'
  );
    
    
  $form['add'] = array(
    '#type' => 'submit',
    '#value' => t('Add'),
    '#suffix' => '</div>'
  );
  
  return $form;
}

function everyfeed_admin_products_validate($form, $form_state) {
//!@todo make sure category is valid
// check its not already in the list
}


function everyfeed_admin_products_submit($form, $form_state) { 
  $entry = array(
    'keyword' => $form_state['values']['newproductsearch'],
    'category_id' => $form_state['values']['newproductcategory']
  );
  
  $result = drupal_write_record('everyfeed_products', $entry);
  
/*
  module_load_include('inc', 'everyfeed', 'everyfeed.batch');
  $q = array();
  everyfeed_batch_check($entry['keyword'], $entry['category_id'], $q);
  everyfeed_batch_process($q);
*/
  
  everyfeed_admin_product_add($entry['keyword'], $entry['category_id']);
}


function everyfeed_admin_product_add($product, $category) {
  $batch = array(
    'title' => t('Importing products'),
    'init_message' => t('Contacting the product database'),
    'progress_message' => t('Sifting through products'),
    'error_message' => t('Product import has encountered an error.'),
    'operations' => array(
      array('everyfeed_batch_process', array($product, $category)),
    ),
    'finished' => 'everyfeed_batch_complete',
    'file' => drupal_get_path('module', 'everyfeed') . '/everyfeed.batch.inc',
  );
  batch_set($batch);
}

function everyfeed_get_category_list() {
  $data = everyfeed_callapi('getmeta/category');
	$categories = array();
	
	// Re-jig the array of categories so that the cat ID is the array key
	for ($i = 0; $i < count($data['meta']['category']); $i=$i+2) {
  	$d = $data['meta']['category'][$i];
		$categories[$data['meta']['category'][$i+1]] = $data['meta']['category'][$i];
	}

  return $categories;
}


/**
 * This function is a waste of time
 * 
 * @access public
 * @return void
 */
function everyfeed_get_merchant_list() {
  $result = cache_get('merchants');
  $merchants = isset($result->data) ? $result->data : array();

  if (!$merchants) {
    $data = everyfeed_callapi('getmeta/merchant');
    $merchants = array();
    
    foreach($data['meta']['merchant'] as $merchant) {
      if (!is_numeric($merchant)) {
        $merchants[] = $merchant;
      }
    }
     
    if ($merchants) {
      cache_set('merchants', $merchants, 'cache', CACHE_PERMANENT);
    }
  }

  return $merchants;
}


function everyfeed_callapi($method) {
  $result = cache_get($method); 
  $values = isset($result->data) ? $result->data : array();

  if (!$values) {
    $url = 'http://api.everyfeed.net/json/' . variable_get('everyfeed_apikey', '') . '/' . $method . '/';

    $result = drupal_http_request($url);
    $values = drupal_json_decode($result->data);
    $values = $values['everyFeed'];
    
    if ($values) {
      cache_set($method, $values, 'cache', CACHE_TEMPORARY);
    }
  }
  
  return $values;
}